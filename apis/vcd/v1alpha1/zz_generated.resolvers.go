/*
Copyright 2023 ANKASOFT
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this NsxtNetworkDhcpBinding.
func (mg *NsxtNetworkDhcpBinding) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.DHCPV4Config); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DHCPV4Config[i3].Hostname),
			Extract:      resource.ExtractParamPath("computer_name", true),
			Reference:    mg.Spec.ForProvider.DHCPV4Config[i3].HostnameRef,
			Selector:     mg.Spec.ForProvider.DHCPV4Config[i3].HostnameSelector,
			To: reference.To{
				List:    &VmList{},
				Managed: &Vm{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.DHCPV4Config[i3].Hostname")
		}
		mg.Spec.ForProvider.DHCPV4Config[i3].Hostname = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.DHCPV4Config[i3].HostnameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MacAddress),
		Extract:      resource.ExtractParamPath("network[0].mac", true),
		Reference:    mg.Spec.ForProvider.MacAddressRef,
		Selector:     mg.Spec.ForProvider.MacAddressSelector,
		To: reference.To{
			List:    &VmList{},
			Managed: &Vm{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MacAddress")
	}
	mg.Spec.ForProvider.MacAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MacAddressRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.OrgNetworkID),
		Extract:      resource.ExtractParamPath("id", true),
		Reference:    mg.Spec.ForProvider.OrgNetworkIDRef,
		Selector:     mg.Spec.ForProvider.OrgNetworkIDSelector,
		To: reference.To{
			List:    &NetworkRoutedV2List{},
			Managed: &NetworkRoutedV2{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.OrgNetworkID")
	}
	mg.Spec.ForProvider.OrgNetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OrgNetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Vm.
func (mg *Vm) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Disk); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Disk[i3].Name),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.Disk[i3].NameRef,
			Selector:     mg.Spec.ForProvider.Disk[i3].NameSelector,
			To: reference.To{
				List:    &IndependentDiskList{},
				Managed: &IndependentDisk{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Disk[i3].Name")
		}
		mg.Spec.ForProvider.Disk[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Disk[i3].NameRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Network); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Network[i3].Name),
			Extract:      resource.ExtractParamPath("name", true),
			Reference:    mg.Spec.ForProvider.Network[i3].NameRef,
			Selector:     mg.Spec.ForProvider.Network[i3].NameSelector,
			To: reference.To{
				List:    &NetworkRoutedV2List{},
				Managed: &NetworkRoutedV2{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Network[i3].Name")
		}
		mg.Spec.ForProvider.Network[i3].Name = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Network[i3].NameRef = rsp.ResolvedReference

	}

	return nil
}
